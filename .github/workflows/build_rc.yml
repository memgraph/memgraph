name: Build Release Candidate
concurrency:
  group: Build-Release-Candidate-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Version of the release candidate (X.Y.Z)."
        required: true
      rc_number:
        type: string
        description: "Release candidate number (e.g., rc1, rc2, etc.)."
        required: true
      overwrite_tag:
        type: boolean
        description: "Overwrite the existing tag if it exists."
        default: false
      build_mage:
        type: boolean
        description: "Build MAGE."
        default: true

jobs:
  PrepareReleaseBranch:
    name: Prepare Release Branch
    runs-on: ubuntu-24.04
    outputs:
      branch_name: ${{ steps.check_branch.outputs.branch_name }}
      tag_name: ${{ steps.check_tag.outputs.tag_name }}
      short_version: ${{ steps.create_short_version.outputs.short_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Git user
        run: |
          git config user.name github-actions
          git config user.email actions@github.com

      - name: Create Short Version
        id: create_short_version
        run: |
          short_version=$(echo "${{ inputs.version }}" | sed -E 's/^([0-9]+\.[0-9]+)\.0$/\1/')
          echo "short_version=$short_version" >> $GITHUB_OUTPUT

      - name: Check if release branch exists and checkout
        id: check_branch
        run: |
          branch_name="release/${{ steps.create_short_version.outputs.short_version }}"
          if git ls-remote --exit-code --heads origin "$branch_name"; then
            echo "Branch $branch_name exists. Checking out."
            git checkout "$branch_name"
          else
            echo "Branch $branch_name does not exist. Creating a new branch."
            git checkout -b "$branch_name"
          fi
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - name: Set Memgraph Override Version
        run: |
          sed -i "s/set(MEMGRAPH_OVERRIDE_VERSION \"\")/set(MEMGRAPH_OVERRIDE_VERSION \"${{ inputs.release_version }}\")/" CMakeLists.txt
          git add CMakeLists.txt
          # this will fail if there are no changes, but we don't care
          git commit -m "Update CMakeLists.txt with new memgraph override version [skip tests] [skip build]" || true

      - name: Check if tag exists
        id: check_tag
        run: |
          tag_name="v${{ inputs.version }}-${{ inputs.rc_number }}"
          if git ls-remote --exit-code --tags origin "$tag_name"; then
            echo "Tag $tag_name exists."
            if [ "${{ inputs.overwrite_tag }}" == "true" ]; then
              echo "Overwriting existing tag."
              git tag -d "$tag_name"
              git push origin ":refs/tags/$tag_name"
            else
              echo "Skipping tag creation as it already exists."
              exit 1
            fi
          else
            echo "Tag $tag_name does not exist. Proceeding to create a new tag."
          fi
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git push --set-upstream origin "${{ steps.check_branch.outputs.branch_name }}"
          git tag "${{ steps.check_tag.outputs.tag_name }}"
          git push origin "${{ steps.check_tag.outputs.tag_name }}"

  TestRC:
    name: Test Release Candidate
    needs: PrepareReleaseBranch
    uses: ./.github/workflows/reusable_release_tests.yaml
    with:
      os: ubuntu-24.04
      toolchain: v6
      arch: amd
      threads: 24
      build_type: Release
      ref: ${{ needs.PrepareReleaseBranch.outputs.branch_name }}
    secrets: inherit

  StressTestLarge:
    name: Stress Test Large
    needs: PrepareReleaseBranch
    uses: ./.github/workflows/reusable_release_tests.yaml
    with:
      os: ubuntu-24.04
      toolchain: v6
      arch: "amd"
      threads: 24
      build_type: Release
      run_stress_large: 'true'
      run_release_tests: 'false'
    secrets: inherit

  PackageArtifact:
    name: Package Artifact
    needs: PrepareReleaseBranch
    strategy:
      fail-fast: false
      matrix:
        os: [centos-9, centos-10, debian-11, debian-12, fedora-41, ubuntu-22.04, ubuntu-24.04]
        arch: [amd]
        build_type: [Release]
        additional_build_args: ['']
        include: # Add arm builds and RelwithDebInfo builds
          - os: debian-11
            build_type: Release
            arch: arm
            additional_build_args: ''
          - os: debian-12
            build_type: Release
            arch: arm
            additional_build_args: ''
          - os: ubuntu-24.04
            build_type: Release
            arch: arm
            additional_build_args: ''
          - os: ubuntu-24.04
            build_type: Release
            arch: amd
            additional_build_args: '--disable-jemalloc'
          - os: ubuntu-24.04
            build_type: RelWithDebInfo
            arch: arm
            additional_build_args: ''
          - os: ubuntu-24.04
            build_type: RelWithDebInfo
            arch: amd
            additional_build_args: ''
    uses: ./.github/workflows/reusable_package.yaml
    with:
      os: ${{ matrix.os }}
      arch: ${{ matrix.arch }}
      build_type: ${{ matrix.build_type }}
      toolchain: v6
      push_to_github: 'false'
      push_to_s3: 'true'
      s3_bucket: deps.memgraph.io
      s3_region: eu-west-1
      s3_dest_dir: "memgraph/${{ github.ref_name }}"
      additional_build_args: ${{ matrix.additional_build_args }}
      ref: ${{ needs.PrepareReleaseBranch.outputs.branch_name }}
    secrets: inherit

  DockerArtifact:
    name: Docker Artifact
    needs: PrepareReleaseBranch
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        arch: [amd, arm]
        build_type: [Release, RelWithDebInfo]
    uses: ./.github/workflows/reusable_package.yaml
    with:
      os: ${{ matrix.os }}
      arch: ${{ matrix.arch }}
      build_type: ${{ matrix.build_type }}
      toolchain: v6
      additional_build_args: '--for-docker'
      push_to_github: 'false'
      push_to_s3: 'true'
      s3_bucket: deps.memgraph.io
      s3_region: eu-west-1
      s3_dest_dir: "memgraph/${{ github.ref_name }}"
      ref: ${{ needs.PrepareReleaseBranch.outputs.branch_name }}
    secrets: inherit

  TriggerMAGEBuild:
    name: Trigger MAGE Build
    needs: [PrepareReleaseBranch, PackageArtifact]
    if: ${{ inputs.build_mage }}
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.PrepareReleaseBranch.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install requests
        run: |
          python -m pip install --upgrade pip --break-system-packages
          pip install requests --break-system-packages

      - name: Trigger MAGE build
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          echo "Triggering MAGE build for release candidate ${GITHUB_REF_NAME}."
          python3 tools/trigger_mage_rc_build.py \
            --version "${{ inputs.version }}" \
            --short_version "${{ needs.PrepareReleaseBranch.outputs.short_version }}" \
            --rc_number "${{ inputs.rc_number }}" \
            --branch_name "${{ needs.PrepareReleaseBranch.outputs.branch_name }}" \
            --tag_name "${{ needs.PrepareReleaseBranch.outputs.tag_name }}"
