name: Reusable package make and upload

on:
  workflow_call:
    inputs:
      os:
        type: string
        description: "Target os. Default value is debian-12."
        default: debian-12
      arch:
        type: string
        description: "Target architecture. Default value is amd."
        default: amd
      toolchain:
        type: string
        description: "Toolchain version. Default value is v5."
        default: v5
      build_type:
        type: string
        description: "Memgraph Build type. Default value is Release."
        default: Release
      additional_build_args:
        type: string
        description: "Additional build flags (--for-platform, --for-docker ...). Default value is empty."
        default: ''
      push_to_github:
        type: string
        description: "Should the final package be pushed to GitHub. Default value is false."
        default: false
      push_to_s3:
        type: string
        description: "Should the final package be pushed to an S3 bucket. Default value is false."
        default: false
      s3_bucket:
        type: string
        description: "Name of the target S3 bucket."
        default: ''
      s3_region:
        type: string
        description: "Region for the target S3 bucket."
        default: eu-west-1
      s3_dest_dir:
        type: string
        description: "Target dir path in S3 bucket."
        default: ''

jobs:
  PackageAndUpload:
    runs-on: ${{ inputs.arch == 'arm' && 'ubuntu-large-arm' || fromJSON('[ "self-hosted", "DockerMgBuild", "X64" ]') }}
    timeout-minutes: ${{ inputs.arch == 'arm' && 120 || 60 }}
    env:
      mgdeps_cache_host: "${{ inputs.arch == 'arm' && 'false' || 'mgdeps-cache' }}" # Required because strange is not connected to memgraph openVPN
    steps:
      - name: "Validate S3 dest dir for official package"
        if: ${{ inputs.push_to_s3 == 'true' && inputs.s3_bucket == 'download.memgraph.com' }}
        run: |
          if [[ "${{ inputs.build_type }}" == 'RelWithDebInfo' ]]; then
            echo -e "Error: You are pushing a RelWithDebInfo build to 'download.memgraph.com'."
            exit 1
          fi
          if ! [[ "${{ inputs.s3_dest_dir }}" =~ memgraph/v[0-9]\.[0-9]+\.[0-9]+$ ]]; then
            echo -e "Error: ${{ inputs.s3_dest_dir }} is not a valid official format. When pushing to 'download.memgraph.com' the dest dir has to match format 'memgraph/vX.Y.Z'!"
            exit 1
          fi
          echo -e "Passed: Dest dir ${{ inputs.s3_dest_dir }} has a valid official format."

      - name: "Set up repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required because of release/get_version.py

      - name: "Unlock keychain for current session" # Required beacuse ARM builds run on macos
        # if: ${{ inputs.arch == 'arm' }}
        if: false
        run: security -v unlock-keychain -p ${{ secrets.SELF_HOSTED_RUNNER_PASSWORD }} ~/Library/Keychains/login.keychain-db

      - name: "Log in to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Set artifact name and dir"
        run: |
          artifact_name=${{ inputs.os }}
          artifact_dir='build/output'
          if [[ "${{ inputs.additional_build_args }}" == *"--for-docker" ]]; then
            artifact_name='docker'
            echo "FOR_DOCKER=true" >> $GITHUB_ENV
            echo "DOCKER_ARTIFACT_DIR=${artifact_dir}/docker" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.additional_build_args }}" == *"--for-platform" ]]; then
            artifact_name="${artifact_name}-platform"
          fi
          if [[ "${{ inputs.arch }}" == 'arm' ]]; then
            artifact_name="${artifact_name}-aarch64"
          fi
          if [[ "${{ inputs.build_type }}" == 'RelWithDebInfo' ]]; then
            artifact_name="${artifact_name}-relwithdebinfo"
          fi
          echo "ARTIFACT_NAME=$artifact_name" >> $GITHUB_ENV
          echo "PACKAGE_ARTIFACT_DIR=${artifact_dir}/package" >> $GITHUB_ENV

      - name: "Spin up mgbuild container"
        run: |
          ./release/package/mgbuild.sh \
          --toolchain ${{ inputs.toolchain }} \
          --os ${{ inputs.os }} \
          --arch ${{ inputs.arch }} \
          run

      - name: "Build Memgraph binaries"
        run: |
          ./release/package/mgbuild.sh \
          --toolchain ${{ inputs.toolchain }} \
          --os ${{ inputs.os }} \
          --arch ${{ inputs.arch }} \
          --build-type ${{ inputs.build_type }} \
          --mgdeps-cache-host ${{ env.mgdeps_cache_host }} \
          build-memgraph ${{ inputs.additional_build_args }}

      - name: "Make package"
        run: |
          ./release/package/mgbuild.sh \
          --toolchain ${{ inputs.toolchain }} \
          --os ${{ inputs.os }} \
          --arch ${{ inputs.arch }} \
          --build-type ${{ inputs.build_type }} \
          package-memgraph

      - name: "Copy package"
        run: |
          ./release/package/mgbuild.sh \
          --toolchain ${{ inputs.toolchain }} \
          --os ${{ inputs.os }} \
          --arch ${{ inputs.arch }} \
          copy \
          --package \
          --dest-dir ${{ env.PACKAGE_ARTIFACT_DIR }}

      - name: "Stop mgbuild container"
        if: always()
        run: |
          ./release/package/mgbuild.sh \
          --toolchain ${{ inputs.toolchain }} \
          --os ${{ inputs.os }} \
          --arch ${{ inputs.arch }} \
          stop --remove

      - name: "Create docker image"
        if: ${{ env.FOR_DOCKER == 'true' }}
        run: |
          ./release/package/mgbuild.sh \
          --toolchain ${{ inputs.toolchain }} \
          --os ${{ inputs.os }} \
          --arch ${{ inputs.arch }} \
          --build-type ${{ inputs.build_type }} \
          package-docker \
          --src-dir ${{ env.PACKAGE_ARTIFACT_DIR }} \
          --dest-dir ${{ env.DOCKER_ARTIFACT_DIR }}

      - name: "Upload to Github"
        if: ${{  inputs.push_to_github == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: "${{ env.FOR_DOCKER == 'true' && env.DOCKER_ARTIFACT_DIR || env.PACKAGE_ARTIFACT_DIR }}/memgraph*"

      - name: "Upload to S3"
        if: ${{ inputs.push_to_s3 == 'true' }}
        run:
          aws s3 sync $SOURCE_DIR s3://${{ inputs.s3_bucket }}/$DEST_DIR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.s3_region }}
          SOURCE_DIR: ${{ env.FOR_DOCKER == 'true' && env.DOCKER_ARTIFACT_DIR || env.PACKAGE_ARTIFACT_DIR }}
          DEST_DIR: "${{ inputs.s3_dest_dir }}/${{ env.ARTIFACT_NAME }}/"
