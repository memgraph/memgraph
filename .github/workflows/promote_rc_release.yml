name: Promote RC to Release
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  pull_request:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (format: X.Y.Z)"
        required: true
        type: string
      rc_version:
        description: "RC version to promote (format: rcX)"
        required: true
        type: string
      force_promote:
        type: boolean
        description: "Override existing release."
        default: false

env:
  s3_region: "eu-west-1"
  rc_bucket: "deps.memgraph.io"
  rc_dir: "memgraph/v2.18.0-rc1"
  # release_bucket: "download.memgraph.com"
  release_bucket: "deps.memgraph.io"
  release_dir: "memgraph-release-test/v2.18.0"
  package_rpm: "memgraph-2.18.0_1-1.x86_64.rpm"
  package_deb_amd: "memgraph_2.18.0-1_amd64.deb"
  package_deb_arm: "memgraph_2.18.0-1_arm64.deb"
  package_docker: "memgraph-2.18.0-docker.tar.gz"

jobs:
  PromotePackage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [amzn-2, centos-7, centos-9, debian-11, debian-12, docker, fedora-38, fedora-39, rocky-9.3, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        arch: [amd]
        include:
          - os: debian-11
            arch: arm
          - os: debian-12
            arch: arm
          - os: docker
            arch: arm
          - os: ubuntu-22.04
            arch: arm
          - os: ubuntu-24.04
            arch: arm
    steps:
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_AK_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SAK }}
          aws-region: ${{ env.s3_region }}

      - name: Setup package name
        run: |
          os=${{ matrix.os }}
          if [[ $os == amzn* || $os == centos* || $os == fedora* || $os == rocky* ]]; then
            package_name=${package_rpm}
          elif [[ $os == docker ]]; then
            package_name=${package_docker}
          else
            package_name=${package_deb_amd}
            if [[ "${{ matrix.arch }}" == "arm" ]]; then
              package_name=${package_deb_arm}
            fi
          fi
          echo "package_name=$package_name" >> $GITHUB_ENV

      - name: Check if rc package for this build exists
        run: |
          if ! aws s3 ls s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${package_name} &> /dev/null; then
            echo "RC package for ${{ matrix.os }}-${{ matrix.arch }} does not exist at s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${package_name}"
            exit 1
          fi

      - name: Check if release package for this build aldready exists
        run: |
          if aws s3 ls s3://${release_bucket}/${release_dir}/${{ matrix.os }}/${package_name} &> /dev/null; then
            echo "Release package for ${{ matrix.os }}-${{ matrix.arch }} already exists at s3://${release_bucket}/${release_dir}/${{ matrix.os }}/${package_name}"
            if [[ "${{ github.event.inputs.force_promote }}" != "true" ]]; then
              echo "Set force_promote to true to override existing release."
              exit 1
            fi
            echo "Forcing promotion of existing release."
          fi

      - name: Promote RC to Release
        run: |
          aws s3 cp s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${package_name} s3://${release_bucket}/${release_dir}/${{ matrix.os }}/${package_name}
          echo "Successfully promoted RC package for ${{ matrix.os }}-${{ matrix.arch }} to s3://${release_bucket}/${release_dir}/${{ matrix.os }}/${package_name}"

  PromoteDocker:
    if: false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [docker]
        build_type: [Release, RelWithDebInfo]
    env:
      package_name: "memgraph-2.18.0-${{ matrix.os }}.tar.gz"
    steps:
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_AK_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SAK }}
          aws-region: ${{ env.s3_region }}

      - name: Check if rc image for this build exists
        run: |
          if [[ "${{ matrix.build_type }}" == "Release"]]; then
            if ! aws s3 ls s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${package_name} &> /dev/null; then
              echo "RC package for ${{ matrix.os }} does not exist at s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${package_name}"
              exit 1
            elif ! aws s3 ls s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-aarch64/${package_name} &> /dev/null; then
              echo "RC package for ${{ matrix.os }}-aarch64 does not exist at s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-aarch64/${package_name}"
              exit 1
            fi
          else
            if ! aws s3 ls s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-relwithdebinfo/${package_name} &> /dev/null; then
              echo "RC package for ${{ matrix.os }}-relwithdebinfo does not exist at s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-relwithdebinfo/${package_name}"
              exit 1
            fi
          fi

      - name: Check if release image for this build aldready exists
        run: |
          image_name=memgraph/memgraph:2.18.0
          if [[ "${{ matrix.build_type }}" == "RelWithDebInfo" ]]; then
            image_name=memgraph/memgraph:2.18.0-relwithdebinfo
          fi
          if docker manifest inspect ${image_name} &> /dev/null; then
            echo "Release image ${image_name} already exists on DockerHub"
            if [[ "${{ github.event.inputs.force_promote }}" != "true" ]]; then
              echo "Set force_promote to true to override existing release."
              exit 1
            fi
            echo "Forcing promotion of existing release."
          fi

      - name: Download and load rc images
        run: | # Download amd + arm for Release and amd for RelwithDebInfo
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            aws s3 cp s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${package_name} - | docker load
            aws s3 cp s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-aarch64/${package_name} - | docker load
          else
            aws s3 cp s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-relwithdebinfo/${package_name} - | docker load
          fi

      - name: Setup docker manifest
        if: ${{ matrix.build_type == 'Release' }}
        run: |

      - name: "Log in to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Promote RC to Release
        run: |
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            docker push memgraph/memgraph:2.18.0
            echo "Successfully published memgraph/memgraph:2.18.0 to DockerHub"
          else
            docker push memgraph/memgraph:2.18.0-relwithdebinfo
            echo "Successfully published memgraph/memgraph:2.18.0-relwithdebinfo to DockerHub"
          fi
