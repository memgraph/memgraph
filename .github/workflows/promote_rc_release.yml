name: Promote RC to Release
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (format: X.Y.Z)"
        required: true
        type: string
      rc_version:
        description: "RC version to promote (format: rcX)"
        required: true
        type: string
      force_promote:
        type: boolean
        description: "Override existing release."
        default: false

env:
  s3_region: "eu-west-1"
  rc_bucket: "deps.memgraph.io"
  rc_dir: "memgraph/v${{ github.event.inputs.release_version }}-rc${{ github.event.inputs.rc_version }}"
  release_bucket: "download.memgraph.com"
  release_dir: "memgraph/v${{ github.event.inputs.release_version }}"
  binary_base: "memgraph-${{ github.event.inputs.release_version }}"
  binary_rpm_ext: "_1-1.x86_64.rpm"
  binary_deb_amd_ext: "-1_amd64.deb"
  binary_deb_arm_ext: "-1_arm64.deb"

jobs:
  PromotePackage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [amzn-2, centos-7, centos-9, debian-11, debian-12, docker, fedora-38, fedora-39, rocky-9.3, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        arch: [amd]
        include:
          - os: debian-11
            arch: arm
          - os: debian-12
            arch: arm
          - os: docker
            arch: arm
          - os: ubuntu-22.04
            arch: arm
          - os: ubuntu-24.04
            arch: arm
    steps:
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.s3_region }}

      - name: Setup binary name
        run: |
          os=${{ matrix.os }}
          if [[ $os == amzn* || $os == centos* || $os == fedora* || $os == rocky* ]]; then
            binary_name=${binary_base}${binary_rpm_ext}
          else
            binary_name=${binary_base}${binary_deb_amd_ext}
            if [[ ${{ matrix.arch }} == 'arm' ]]; then
              binary_name=${binary_base}${binary_deb_arm_ext}
            fi
          fi
          echo "binary_name=$binary_name" >> $GITHUB_ENV

      - name: Check if rc binary for this build exists
        run: |
          if ! aws s3 ls s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${binary_name} &> /dev/null; then
            echo "RC binary for ${{ matrix.os }}-${{ matrix.arch }} does not exist at s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${binary_name}"
            exit 1
          fi

      - name: Check if release binary for this build aldready exists
        run: |
          if aws s3 ls s3://${release_bucket}/${release_dir}/${{ matrix.os }}/${binary_name} &> /dev/null; then
            echo "Release binary for ${{ matrix.os }}-${{ matrix.arch }} already exists at s3://${release_bucket}/${release_dir}/${{ matrix.os }}/${binary_name}"
            if [[ ${{ github.event.inputs.force_promote }} == false ]]; then
              echo "Set force_promote to true to override existing release."
              exit 1
            fi
            echo "Forcing promotion of existing release."
          fi

      - name: Promote RC to Release
        run: |
          aws s3 cp s3://${rc_bucket}/${rc_dir}/${os}/${binary_name} s3://${release_bucket}/${release_dir}/${os}/${binary_name}
          echo "Successfully promoted RC binary for ${os}-${{ matrix.arch }} to s3://${release_bucket}/${release_dir}/${os}/${binary_name}"
