name: Promote RC to Release
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (format: X.Y.Z)"
        required: true
        type: string
      rc_version:
        description: "RC version to promote (format: rcX)"
        required: true
        type: string
      force_promote:
        type: boolean
        description: "Override existing release"
        default: false
      test:
        description: "Run in test mode"
        required: false
        type: boolean

env:
  s3_region: eu-west-1
  rc_bucket: deps.memgraph.io
  rc_dir: memgraph/v${{ github.event.inputs.release_version }}-${{ github.event.inputs.rc_version }}
  release_bucket: ${{ github.event.inputs.test == 'false' && 'download.memgraph.com' || 'deps.memgraph.io' }}
  release_dir: memgraph${{ github.event.inputs.test == 'true' && '-release-test' || '' }}/v${{ github.event.inputs.release_version }}
  package_rpm: memgraph-${{ github.event.inputs.release_version }}_1-1.x86_64.rpm
  package_deb_amd: memgraph_${{ github.event.inputs.release_version }}-1_amd64.deb
  package_deb_arm: memgraph_${{ github.event.inputs.release_version }}-1_arm64.deb
  package_docker: memgraph-${{ github.event.inputs.release_version }}-docker.tar.gz
  package_docker_relwithdebinfo: memgraph-${{ github.event.inputs.release_version }}-relwithdebinfo-docker.tar.gz
  docker_repo_rc: memgraph/memgraph
  docker_repo_release: memgraph/memgraph${{ github.event.inputs.test == 'true' && '-release-test' || '' }}

jobs:
  PromotePackage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [centos-9, centos-10, debian-11, debian-12, docker, fedora-41, ubuntu-22.04, ubuntu-24.04]
        arch: [amd]
        malloc: [false]
        build_type: [Release]
        include:
          - os: docker
            arch: arm
            malloc: false
            build_type: Release
          - os: docker
            arch: amd
            malloc: false
            build_type: RelWithDebInfo
          - os: docker
            arch: arm
            malloc: false
            build_type: RelWithDebInfo
          - os: ubuntu-24.04
            arch: arm
            malloc: false
            build_type: Release
          - os: ubuntu-24.04
            arch: amd
            malloc: true
            build_type: Release
          - os: ubuntu-24.04
            arch: arm
            malloc: false
            build_type: RelWithDebInfo
          - os: ubuntu-24.04
            arch: amd
            malloc: false
            build_type: RelWithDebInfo
    steps:
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_AK_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SAK }}
          aws-region: ${{ env.s3_region }}

      - name: Setup package path
        run: |
          os=${{ matrix.os }}
          if [[ $os == amzn* || $os == centos* || $os == fedora* || $os == rocky* ]]; then
            package_name=${package_rpm}
          elif [[ $os == docker ]]; then
            if [[ "${{ matrix.build_type }}" == "RelWithDebInfo" ]]; then
              package_name=${package_docker_relwithdebinfo}
            else
              package_name=${package_docker}
            fi
          else
            package_name=${package_deb_amd}
            if [[ "${{ matrix.arch }}" == "arm" ]]; then
              package_name=${package_deb_arm}
            fi
          fi
          if [[ "${{ matrix.arch }}" == "arm" ]]; then
            os="${os}-aarch64"
          fi
          if [[ "${{ matrix.build_type }}" == "RelWithDebInfo" ]]; then
            os="${os}-relwithdebinfo"
          fi
          if [[ "${{ matrix.malloc }}" == "false" ]]; then
            echo "package_path=${os}/${package_name}" >> $GITHUB_ENV
          else
            echo "package_path=${os}-malloc/${package_name}" >> $GITHUB_ENV
          fi

      - name: Check if rc package for this build exists
        run: |
          if ! aws s3 ls s3://${rc_bucket}/${rc_dir}/${package_path} &> /dev/null; then
            echo "RC package for ${os} does not exist at s3://${rc_bucket}/${rc_dir}/${package_path}"
            exit 1
          fi

      - name: Check if release package for this build already exists
        run: |
          if aws s3 ls s3://${release_bucket}/${release_dir}/${package_path} &> /dev/null; then
            echo "Release package for ${os} already exists at s3://${release_bucket}/${release_dir}/${package_path}"
            if [[ "${{ github.event.inputs.force_promote }}" != "true" ]]; then
              echo "Set force_promote to true to override existing release!"
              exit 1
            fi
            echo "Forcing promotion of existing release ..."
          fi

      - name: Promote RC to Release
        run: |
          aws s3 cp s3://${rc_bucket}/${rc_dir}/${package_path} s3://${release_bucket}/${release_dir}/${package_path}
          echo "Successfully promoted RC package for ${os} to s3://${release_bucket}/${release_dir}/${package_path}!"

  PromoteDocker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [docker]
        build_type: [Release, RelWithDebInfo]
    steps:
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_AK_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SAK }}
          aws-region: ${{ env.s3_region }}

      - name: Check if rc image for this build exists
        run: |

          package="${package_docker}"
          os_x86="${{ matrix.os }}"
          os_arm="${{ matrix.os }}-aarch64"
          if [[ "${{ matrix.build_type }}" == "RelWithDebInfo" ]]; then
            package="${package_docker_relwithdebinfo}"
            os_x86="${os_x86}-relwithdebinfo"
            os_arm="${os_arm}-relwithdebinfo"
          fi
          if ! aws s3 ls s3://${rc_bucket}/${rc_dir}/${os_x86}/${package} &> /dev/null; then
            echo "RC package for ${os_x86} does not exist at s3://${rc_bucket}/${rc_dir}/${os_x86}/${package}"
            exit 1
          elif ! aws s3 ls s3://${rc_bucket}/${rc_dir}/${os_arm}/${package} &> /dev/null; then
            echo "RC package for ${os_arm} does not exist at s3://${rc_bucket}/${rc_dir}/${os_arm}/${package}"
            exit 1
          fi


      - name: Check if release image for this build aldready exists
        run: |
          release_image=${docker_repo_release}:${{ github.event.inputs.release_version }}
          if [[ "${{ matrix.build_type }}" == "RelWithDebInfo" ]]; then
            release_image=${docker_repo_release}:${{ github.event.inputs.release_version }}-relwithdebinfo
          fi
          if docker manifest inspect ${release_image} &> /dev/null; then
            echo "Release image ${release_image} already exists on DockerHub"
            if [[ "${{ github.event.inputs.force_promote }}" != "true" ]]; then
              echo "Set force_promote to true to override existing release!"
              exit 1
            fi
            echo "Forcing promotion of existing release ..."
          fi

      - name: "Log in to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get dockerhub token
        run: |
          dockerhub_token=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKERHUB_USERNAME }}", "password": "${{ secrets.DOCKERHUB_TOKEN }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          echo "dockerhub_token=${dockerhub_token}" >> $GITHUB_ENV

      - name: Promote RC to Release (Release)
        run: |
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            rc_image=${docker_repo_rc}:${{ github.event.inputs.release_version }}
            release_image=${docker_repo_release}:${{ github.event.inputs.release_version }}
            arm_s3="s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-aarch64/${package_docker}"
            amd_s3="s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}/${package_docker}"
          else
            rc_image=${docker_repo_rc}:${{ github.event.inputs.release_version }}-relwithdebinfo
            release_image=${docker_repo_release}:${{ github.event.inputs.release_version }}-relwithdebinfo
            arm_s3=s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-aarch64-relwithdebinfo/${package_docker_relwithdebinfo}
            amd_s3=s3://${rc_bucket}/${rc_dir}/${{ matrix.os }}-relwithdebinfo/${package_docker_relwithdebinfo}
          fi
          release_image_amd=${release_image}-amd64
          release_image_arm=${release_image}-arm64

          # Download and load, retag if necessary, push temporary image
          # arm64
          aws s3 cp "$arm_s3" - | docker load
          docker tag ${rc_image} ${release_image_arm}
          docker push ${release_image_arm}

          # amd64
          aws s3 cp "$amd_s3" - | docker load
          docker tag ${rc_image} ${release_image_amd}
          docker push ${release_image_amd}

          # Setup manifest list for release image
          docker manifest create ${release_image} \
          --amend ${release_image_amd} \
          --amend ${release_image_arm}
          docker manifest push ${release_image}

          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            # Setup manifest list for latest image
            release_image_latest=${docker_repo_release}:latest
            docker manifest create ${release_image_latest} \
            --amend ${release_image_amd} \
            --amend ${release_image_arm}
            docker manifest push ${release_image_latest}
            echo "Successfully published ${release_image} and ${release_image_latest} to DockerHub!"
          else
            echo "Successfully published ${release_image} to DockerHub!"
          fi


      - name: Clean up temporary images
        run: |
          # set tags for release/relwithdebinfo
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            tag_amd="${{ github.event.inputs.release_version }}-amd64"
            tag_arm="${{ github.event.inputs.release_version }}-arm64"
          else
            tag_amd="${{ github.event.inputs.release_version }}-relwithdebinfo-amd64"
            tag_arm="${{ github.event.inputs.release_version }}-relwithdebinfo-arm64"
          fi

          echo "Deleting temporary image ${tag_amd} ..."
          curl -i -n -X DELETE -H "Authorization: JWT ${dockerhub_token}" https://hub.docker.com/v2/repositories/${docker_repo_release}/tags/${tag_amd}/
          echo "Deleting temporary image ${tag_arm} ..."
          curl -i -n -X DELETE -H "Authorization: JWT ${dockerhub_token}" https://hub.docker.com/v2/repositories/${docker_repo_release}/tags/${tag_arm}/

      - name: Clean up Docker
        if: always()
        continue-on-error: true
        run: |
          ./tools/docker_cleanup.sh
