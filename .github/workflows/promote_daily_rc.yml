name: Promote Daily Build to RC
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      release_date:
        description: "Release date (format YYYYMMDD)"
        required: true
        type: string
      release_version:
        description: "Release version (format: X.Y.Z)"
        required: true
        type: string
      rc_version:
        description: "RC version to create (format: rcX)"
        required: true
        type: string
      force_promote:
        type: boolean
        description: "Override existing RC"
        default: false
      overwrite:
        type: boolean
        description: "Delete existing release branch and tag, if found"
        default: false

env:
  s3_region: eu-west-1
  rc_bucket: deps.memgraph.io
  rc_dir: memgraph/v${{ github.event.inputs.release_version }}-${{ github.event.inputs.rc_version }}
  release_bucket: ${{ github.event.inputs.test == 'false' && 'download.memgraph.com' || 'deps.memgraph.io' }}
  release_dir: memgraph${{ github.event.inputs.test == 'true' && '-release-test' || '' }}/v${{ github.event.inputs.release_version }}
  package_rpm: memgraph-${{ github.event.inputs.release_version }}_1-1.x86_64.rpm
  package_deb_amd: memgraph_${{ github.event.inputs.release_version }}-1_amd64.deb
  package_deb_arm: memgraph_${{ github.event.inputs.release_version }}-1_arm64.deb
  package_docker: memgraph-${{ github.event.inputs.release_version }}-docker.tar.gz
  package_docker_relwithdebinfo: memgraph-${{ github.event.inputs.release_version }}-relwithdebinfo-docker.tar.gz
  docker_repo_rc: memgraph/memgraph
  docker_repo_release: memgraph/memgraph${{ github.event.inputs.test == 'true' && '-release-test' || '' }}

jobs:
  CreateReleaseBranch:
    runs-on: [self-hosted]
    steps:
      - name: Set up repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_PAT }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.S3_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Determine Release Commit Hash
        run: |
          # command here to figure out commit hash to checkout for release
          commit_hash="$(python3 tools/get_daily_commit_hash.py date)"
          
          # Count the number of words (hashes) in the result
          num_hashes=$(echo "$commit_hash" | wc -w)

          if [ -z "$commit_hash" ] || [ "$num_hashes" -ne 1 ]; then
            echo "Error: commit_hash is either empty or has multiple hash values."
            echo "Hashes found: $commit_hash"
            exit 1
          fi

          echo "Using commit hash: $commit_hash"
          echo "COMMIT_HASH=$commit_hash" >> $GITHUB_ENV

      - name: Checkout Release Branch and Create Tag
        run: |
          # delete tag if it already exists
          tag_name="v${{ inputs.release_version }}-${{ inputs.rc_version }}"
          # Check if the tag exists locally
          if git show-ref --tags "$tag_name" > /dev/null 2>&1; then
            echo "Tag '$tag_name' exists in this repository."
            
            if [ "${{ inputs.overwrite }}" = true ]; then
              echo "Overwrite flag is true, deleting tag '$tag_name' locally and on remote 'origin'."
              # Delete the local tag
              git tag -d "$tag_name"
              
              # Delete the tag from the remote called 'origin'
              git push origin --delete "$tag_name"
            else
              echo "Overwrite flag is false. Exiting with error as tag '$tag_name' already exists."
              exit 1
            fi
          else
            echo "Tag '$tag_name' does not exist. No action taken."
          fi

          # delete the release branch if it already exists (I don't like this, a better way should probably be found)
          branch_name="release/v${{ inputs.release_version }}"
          if git ls-remote --exit-code --heads origin "$branch_name"; then
            if [ "${{ inputs.overwrite }}" == "true" ]; then
              echo "Branch '$branch_name' exists, deleting it..."
              git push origin --delete "$branch_name"
            else
              echo "Branch '$branch_name' exists, failing..."
              exit 1
            fi
          else
            echo "Branch '$branch_name' does not exist."
          fi

          # checkout the commit hash we want to create the release branch from
          git checkout $COMMIT_HASH

          # create release branch 
          git checkout -b $branch_name
          
          # override memgraph version
          sed -i "s/set(MEMGRAPH_OVERRIDE_VERSION \"\")/set(MEMGRAPH_OVERRIDE_VERSION \"${{ inputs.release_version }}\")/" CMakeLists.txt
          git add CMakeLists.txt
          git commit -m "Update CMakeLists.txt with new memgraph override version [skip tests]"

          # push to github
          git push --set-upstream origin $branch_name

          # add tag
          git tag $tag_name

          # push tag to github
          git push && git push origin $tag_name

