#!/bin/bash -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$DIR"

source "$DIR/environment/util.sh"

DISTRO=$(operating_system)
ARCHITECTURE=$(architecture)

function print_help () {
    echo "Usage: $0 [OPTION]"
    echo -e "Check for missing packages and setup the project.\n"
    echo "Optional arguments:"
    echo -e "  -h\tdisplay this help and exit"
    echo -e "  --without-libs-setup\tskip the step for setting up libs"
    echo -e "  --ci\tscript is being run inside ci"
}

function setup_virtualenv () {
    pushd $1 > /dev/null
    echo "Setting up virtualenv for: $1"

    # remove old virtualenv
    if [ -d ve3 ]; then
        rm -rf ve3
    fi

    # create new virtualenv
    python3 -m virtualenv -p python3 ve3 || exit 1
    source ve3/bin/activate
    pip --timeout 1000 install -r requirements.txt || exit 1
    deactivate

    popd > /dev/null
}

setup_libs=true
ci=false
if [[ $# -eq 1 && "$1" == "-h" ]]; then
    print_help
    exit 0
else
    while(($#)); do
        case "$1" in
          --without-libs-setup)
              shift
              setup_libs=false
          ;;
          --ci)
              shift
              ci=true
          ;;
          *)
              # unknown option
              echo "Invalid argument provided: $1"
              print_help
              exit 1
          ;;
        esac
    done
fi

if [ "${ARCHITECTURE}" = "arm64" ] || [ "${ARCHITECTURE}" = "aarch64" ]; then
  OS_SCRIPT=$DIR/environment/os/$DISTRO-arm.sh
else
  OS_SCRIPT=$DIR/environment/os/$DISTRO.sh
fi
echo "ALL BUILD PACKAGES: $($OS_SCRIPT list MEMGRAPH_BUILD_DEPS)"
$OS_SCRIPT check MEMGRAPH_BUILD_DEPS
echo "All packages are in-place..."

# create a default build directory
mkdir -p ./build

if [[ "$setup_libs" == "true" ]]; then
  # Setup libs (download).
  cd libs
  ./cleanup.sh
  ./setup.sh
  cd ..
fi

# Fix for centos 7 during release
if [[ "$ci" == "false" ]]; then
  if [ "${DISTRO}" = "centos-7" ] || [ "${DISTRO}" = "debian-11" ] || [ "${DISTRO}" = "amzn-2" ]; then
    if python3 -m pip show virtualenv >/dev/null 2>/dev/null; then
      python3 -m pip uninstall -y virtualenv
    fi
    python3 -m pip install virtualenv
  fi
else
  if [ "${DISTRO}" = "centos-7" ] || [ "${DISTRO}" = "amzn-2" ]; then
    if python3 -m pip show virtualenv >/dev/null 2>/dev/null; then
      python3 -m pip uninstall -y virtualenv
    fi
    python3 -m pip install --user virtualenv
  fi
fi

# setup gql_behave dependencies
setup_virtualenv tests/gql_behave

# setup stress dependencies
setup_virtualenv tests/stress

# setup integration/ldap dependencies
setup_virtualenv tests/integration/ldap

# Setup tests dependencies.
# NOTE: This is commented out because of the build order (at the time of
# execution mgclient is not built yet) which makes this setup to fail. mgclient
# is built during the make phase. The tests/setup.sh is called under GHA CI
# jobs.
# cd tests
# ./setup.sh
# cd ..
# TODO(gitbuda): Remove setup_virtualenv, replace it with tests/ve3. Take care
# of the build order because tests/setup.py builds pymgclient which depends on
# mgclient which is build after this script by calling make.

echo "Done installing dependencies for Memgraph"

echo "Linking git hooks OR skip if .git folder is not there"
if [ -d "$DIR/.git" ]; then
  for hook in $(find $DIR/.githooks -type f -printf "%f\n"); do
    ln -s -f "$DIR/.githooks/$hook" "$DIR/.git/hooks/$hook"
    echo "Added $hook hook"
  done;
else
  echo "WARNING: .git folder not present, skip adding hooks"
fi

# Install precommit hook except on old operating systems because we don't
# develop on them -> pre-commit hook not required -> we can use latest
# packages.
if [[ "$ci" == "false" ]]; then
  if [ "${DISTRO}" != "centos-7" ] && [ "$DISTRO" != "debian-10" ] && [ "${DISTRO}" != "ubuntu-18.04" ] && [ "${DISTRO}" != "amzn-2" ]; then
    python3 -m pip install pre-commit
    python3 -m pre_commit install
    # Install py format tools for usage during the development.
    echo "Install black formatter"
    python3 -m pip install black==23.1.*
    echo "Install isort"
    python3 -m pip install isort==5.12.*
  fi
fi

# Link `include/mgp.py` with `release/mgp/mgp.py`
ln -v -f include/mgp.py release/mgp/mgp.py
