diff --git a/include/nlohmann/json.hpp b/include/nlohmann/json.hpp
index 95d6bf1d..65d0ce3e 100644
--- a/include/nlohmann/json.hpp
+++ b/include/nlohmann/json.hpp
@@ -565,51 +565,65 @@ class basic_json // NOLINT(cppcoreguidelines-special-member-functions,hicpp-spec
             }
             if (t == value_t::array || t == value_t::object)
             {
-                // flatten the current json_value to a heap-allocated stack
-                std::vector<basic_json> stack;
-
-                // move the top-level items to stack
-                if (t == value_t::array)
-                {
-                    stack.reserve(array->size());
-                    std::move(array->begin(), array->end(), std::back_inserter(stack));
-                }
-                else
+#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND))
+                try
                 {
-                    stack.reserve(object->size());
-                    for (auto&& it : *object)
-                    {
-                        stack.push_back(std::move(it.second));
-                    }
-                }
-
-                while (!stack.empty())
-                {
-                    // move the last item to local variable to be processed
-                    basic_json current_item(std::move(stack.back()));
-                    stack.pop_back();
+#endif
+                    // flatten the current json_value to a heap-allocated stack
+                    std::vector<basic_json, allocator_type> stack;

-                    // if current_item is array/object, move
-                    // its children to the stack to be processed later
-                    if (current_item.is_array())
+                    // move the top-level items to stack
+                    if (t == value_t::array)
                     {
-                        std::move(current_item.m_data.m_value.array->begin(), current_item.m_data.m_value.array->end(), std::back_inserter(stack));
-
-                        current_item.m_data.m_value.array->clear();
+                        stack.reserve(array->size());
+                        std::move(array->begin(), array->end(), std::back_inserter(stack));
                     }
-                    else if (current_item.is_object())
+                    else
                     {
-                        for (auto&& it : *current_item.m_data.m_value.object)
+                        stack.reserve(object->size());
+                        for (auto&& it : *object)
                         {
                             stack.push_back(std::move(it.second));
                         }
-
-                        current_item.m_data.m_value.object->clear();
                     }

-                    // it's now safe that current_item get destructed
-                    // since it doesn't have any children
+                    while (!stack.empty())
+                    {
+                        // move the last item to local variable to be processed
+                        basic_json current_item(std::move(stack.back()));
+                        stack.pop_back();
+
+                        // if current_item is array/object, move
+                        // its children to the stack to be processed later
+                        if (current_item.is_array())
+                        {
+                            std::move(current_item.m_data.m_value.array->begin(), current_item.m_data.m_value.array->end(), std::back_inserter(stack));
+
+                            current_item.m_data.m_value.array->clear();
+                        }
+                        else if (current_item.is_object())
+                        {
+                            for (auto&& it : *current_item.m_data.m_value.object)
+                            {
+                                stack.push_back(std::move(it.second));
+                            }
+
+                            current_item.m_data.m_value.object->clear();
+                        }
+
+                        // it's now safe that current_item get destructed
+                        // since it doesn't have any children
+                    }
+#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND))
                 }
+                catch (...)     // NOLINT(bugprone-empty-catch)
+                {
+                    // Recursion avoidance has issue allocating temporary space. This may have been `std::bad_alloc`
+                    // or any other exception thrown by a custom allocator.
+                    // RAII will correctly clean up anything moved into `stack`.
+                    // Then we continue with regular recursion based destroy, which will not heap allocate.
+                }
+#endif
             }

             switch (t)
diff --git a/single_include/nlohmann/json.hpp b/single_include/nlohmann/json.hpp
index 8b72ea65..09a23168 100644
--- a/single_include/nlohmann/json.hpp
+++ b/single_include/nlohmann/json.hpp
@@ -19867,51 +19867,65 @@ class basic_json // NOLINT(cppcoreguidelines-special-member-functions,hicpp-spec
             }
             if (t == value_t::array || t == value_t::object)
             {
-                // flatten the current json_value to a heap-allocated stack
-                std::vector<basic_json> stack;
-
-                // move the top-level items to stack
-                if (t == value_t::array)
-                {
-                    stack.reserve(array->size());
-                    std::move(array->begin(), array->end(), std::back_inserter(stack));
-                }
-                else
-                {
-                    stack.reserve(object->size());
-                    for (auto&& it : *object)
-                    {
-                        stack.push_back(std::move(it.second));
-                    }
-                }
-
-                while (!stack.empty())
+#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND))
+                try
                 {
-                    // move the last item to local variable to be processed
-                    basic_json current_item(std::move(stack.back()));
-                    stack.pop_back();
+#endif
+                    // flatten the current json_value to a heap-allocated stack
+                    std::vector<basic_json, allocator_type> stack;

-                    // if current_item is array/object, move
-                    // its children to the stack to be processed later
-                    if (current_item.is_array())
+                    // move the top-level items to stack
+                    if (t == value_t::array)
                     {
-                        std::move(current_item.m_data.m_value.array->begin(), current_item.m_data.m_value.array->end(), std::back_inserter(stack));
-
-                        current_item.m_data.m_value.array->clear();
+                        stack.reserve(array->size());
+                        std::move(array->begin(), array->end(), std::back_inserter(stack));
                     }
-                    else if (current_item.is_object())
+                    else
                     {
-                        for (auto&& it : *current_item.m_data.m_value.object)
+                        stack.reserve(object->size());
+                        for (auto&& it : *object)
                         {
                             stack.push_back(std::move(it.second));
                         }
-
-                        current_item.m_data.m_value.object->clear();
                     }

-                    // it's now safe that current_item get destructed
-                    // since it doesn't have any children
+                    while (!stack.empty())
+                    {
+                        // move the last item to local variable to be processed
+                        basic_json current_item(std::move(stack.back()));
+                        stack.pop_back();
+
+                        // if current_item is array/object, move
+                        // its children to the stack to be processed later
+                        if (current_item.is_array())
+                        {
+                            std::move(current_item.m_data.m_value.array->begin(), current_item.m_data.m_value.array->end(), std::back_inserter(stack));
+
+                            current_item.m_data.m_value.array->clear();
+                        }
+                        else if (current_item.is_object())
+                        {
+                            for (auto&& it : *current_item.m_data.m_value.object)
+                            {
+                                stack.push_back(std::move(it.second));
+                            }
+
+                            current_item.m_data.m_value.object->clear();
+                        }
+
+                        // it's now safe that current_item get destructed
+                        // since it doesn't have any children
+                    }
+#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND))
                 }
+                catch (...)     // NOLINT(bugprone-empty-catch)
+                {
+                    // Recursion avoidance has issue allocating temporary space. This may have been `std::bad_alloc`
+                    // or any other exception thrown by a custom allocator.
+                    // RAII will correctly clean up anything moved into `stack`.
+                    // Then we continue with regular recursion based destroy, which will not heap allocate.
+                }
+#endif
             }

             switch (t)
