Add tests
storage -> does index iterate as expected (tests/unit/storage_v2_indices.cpp LabelPropertyCompositeIndexMixedIteration)
planner -> does the right operator get used (tests/unit/query_plan.cpp)
query -> does the query return right results (tests/gql_behave/tests/memgraph_V1/features [in a new file])



composite index hints ATM not possible in the grammar (hence ANTLR ast) or in the cypher_main_visitor (our AST)
edge type index ATM not allowing composite index


ATM:
Create/Drop will ignore anything but first property


durability:
    We need a test to make sure old version is still readable DONE v18 test convered that
    We need a test to make sure a new version is readable
    v19+ what features have not been added to intergration/durability test


C API
mgp_create_label_property_index
mgp_drop_label_property_index

Not essential:
Temporary string creation, not needed...just do it in/via formatter
* auto properties_stringified = utils::Join(data.properties, ", ");


Deduplicate stuff like
      auto properties_string =
          properties |
          ranges::views::transform([&](PropertyId prop_id) { return name_id_mapper->IdToName(prop_id.AsUint()); }) |
          ranges::views::join(", ") | ranges::to<std::string>;


IdToName -> std::string_view

Add test for:
A B C -> Entry must exist in index
X 2 X

Add test for:
A B C  -> No entry in index
X X X


Problem: we insert entries on update
A B C
1 2 3

1 X X -> entry on SetProperty(A) !! invalidated by MVCC
1 2 X -> entry on SetProperty(B) !! invalidated by MVCC
1 2 3 -> entry on SetProperty(C) !! actaully valid after commit
To only insert one entry, we would have to defer insertion till later
IN_MEMORY_ANALYTICAL would need an alternative collector that Deltas (maybe like what Andreja did for schema)

We should disallow repeated properties when creating composite indices, such as:
CREATE INDEX ON :Node(a, b, a)


Refactor CreateIndex to populate as we insert, rather than fail + cleanup

composite index requires a check on creation that all property ids are unique
+ write test
eg. CREATE INDEX ON :L(A,A); // invalid

<=> for entry

ROADMAP
- parallel change approach
    - add new create DONE
    - add new drop   DONE
    - add new update on label DONE
    - add new update on property DONE
    - add new for list indices + update tests based on new approach (WIP)
    - rewrite rules to use the composite index
    - ScanAllByLabelPropertyRange fix for composite

MVCC CurrentVersionHasLabelProperty for the InMemoryLabelPropertyIndex::Iterable::Iterator::AdvanceUntilValid
- IsPropertyEqual -> ArePropertiesEqual
- many delta cache -> GetProperty needs GetProperties

# Sharp edges
- `ExtractPropertyValuesMissingAsNull` requires the properties be specified in
   order. Could we enforce this either via an assert and/or a note in the
   function docstring.


Point index can not be composite (ANTLR grammar) or check and deny in cypher visitor

Stats for chi-squared scoring and groups need to be binned on a per-prefix
basis:
- [a]
- [a, b]
- [a, b, c] ...


Check, hints work for composite
Check, hints work for point type (mutrally excluisive from label+properties hint)


double check needed
Stats -> durability + replication
metadelta deltas -> do they exits for everything correctly (no more singlar -> plural properties)
[0] -> check this hack is not used anywhere around property index
make apply cycle functional -> the hardcoded domain type
refactor Abort processor (index cleanup)

Headers -> cpp

schema documentation update to "label+properties"


Reject: CREATE INDEX ON :L(a,a);

When create index then insert: multiple entries are made e.g. (A null null), (A B null), (A B C)
-> TODO: defer insertion until after the InitProperties (know all properties that changed)
-> OR: defer insertion of index entries until AdvanceCommand/Commit

We can make InMemoryLabelPropertyIndex::AbortEntries faster
      for (auto &[values, vertex] : to_remove) {
        acc.remove(NewEntry{std::move(values), vertex, start_timestamp});
      }
We could do a sort + bulk remove that would fast iterate to the next matching entry
Like std::set_intersection
