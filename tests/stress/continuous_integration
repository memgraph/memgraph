#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import atexit
import multiprocessing
import os
import subprocess
import time

from test_config import LARGE_DATASET, SMALL_DATASET

# paths
SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
BASE_DIR = os.path.normpath(os.path.join(SCRIPT_DIR, "..", ".."))
BUILD_DIR = os.path.join(BASE_DIR, "build")
MEASUREMENTS_FILE = os.path.join(SCRIPT_DIR, ".apollo_measurements")
KEY_FILE = os.path.join(SCRIPT_DIR, ".key.pem")
CERT_FILE = os.path.join(SCRIPT_DIR, ".cert.pem")

# long running stats file
STATS_FILE = os.path.join(SCRIPT_DIR, ".long_running_stats")
SMALL_DATASET[-1]["options"].extend(["--stats-file", STATS_FILE])
LARGE_DATASET[-1]["options"].extend(["--stats-file", STATS_FILE])

# get number of threads
THREADS = os.environ["THREADS"] if "THREADS" in os.environ else multiprocessing.cpu_count()


def generate_temporary_ssl_certs():
    # https://unix.stackexchange.com/questions/104171/create-ssl-certificate-non-interactively
    subj = "/C=HR/ST=Zagreb/L=Zagreb/O=Memgraph/CN=db.memgraph.com"
    subprocess.run(
        [
            "openssl",
            "req",
            "-new",
            "-newkey",
            "rsa:4096",
            "-days",
            "365",
            "-nodes",
            "-x509",
            "-subj",
            subj,
            "-keyout",
            KEY_FILE,
            "-out",
            CERT_FILE,
        ],
        check=True,
    )


def remove_certificates(args):
    os.remove(KEY_FILE)
    os.remove(CERT_FILE)


def parse_arguments():
    # parse arguments
    parser = argparse.ArgumentParser(description="Run stress tests on Memgraph.")
    parser.add_argument("--memgraph", default=os.path.join(BUILD_DIR, "memgraph"))
    parser.add_argument("--log-file", default="")
    parser.add_argument("--data-directory", default="")
    parser.add_argument("--python", default=os.path.join(SCRIPT_DIR, "ve3", "bin", "python3"), type=str)
    parser.add_argument("--large-dataset", action="store_const", const=True, default=False)
    parser.add_argument("--use-ssl", action="store_const", const=True, default=False)
    parser.add_argument("--verbose", action="store_const", const=True, default=False)
    return parser.parse_args()


def wait_for_server(port, delay=0.1):
    cmd = ["nc", "-z", "-w", "1", "127.0.0.1", str(port)]
    while subprocess.call(cmd) != 0:
        time.sleep(0.01)
    time.sleep(delay)


def start_memgraph(args):
    cwd = os.path.dirname(args.memgraph)
    cmd = [
        args.memgraph,
        "--bolt-num-workers=" + str(THREADS),
        "--storage-properties-on-edges=true",
        "--storage-snapshot-on-exit=true",
        "--storage-snapshot-interval-sec=600",
        "--storage-snapshot-retention-count=1",
        "--storage-wal-enabled=true",
        "--storage-recover-on-startup=false",
        "--query-execution-timeout-sec=1200",
    ]
    if not args.verbose:
        cmd += ["--log-level", "WARNING"]
    if args.log_file:
        cmd += ["--log-file", args.log_file]
    if args.data_directory:
        cmd += ["--data-directory", args.data_directory]
    if args.use_ssl:
        cmd += ["--bolt-cert-file", CERT_FILE, "--bolt-key-file", KEY_FILE]
    proc_mg = subprocess.Popen(cmd, cwd=cwd)
    wait_for_server(7687)

    assert proc_mg.poll() is None, "The database binary died prematurely!"

    return proc_mg


def stop_memgraph(proc_mg):
    proc_mg.terminate()
    ret_mg = proc_mg.wait()
    if ret_mg != 0:
        raise Exception("Memgraph binary returned non-zero ({})!".format(ret_mg))


def run_tests(args):
    runtimes = {}
    dataset = LARGE_DATASET if args.large_dataset else SMALL_DATASET
    for test in dataset:
        if args.use_ssl:
            test["options"] += ["--use-ssl"]
        runtime = run_test(args, **test)
        runtimes[os.path.splitext(test["test"])[0]] = runtime

    return runtimes


# run test helper function
def run_test(args, test, options, timeout):
    print("Running test '{}'".format(test))

    # find binary
    if test.endswith(".py"):
        logging = "DEBUG" if args.verbose else "WARNING"
        binary = [args.python, "-u", os.path.join(SCRIPT_DIR, test), "--logging", logging]
    elif test.endswith(".cpp"):
        exe = os.path.join(BUILD_DIR, "tests", "stress", test[:-4])
        binary = [exe]
    else:
        raise Exception("Test '{}' binary not supported!".format(test))

    # start test
    cmd = binary + ["--worker-count", str(THREADS)] + options
    start = time.time()
    ret_test = subprocess.run(cmd, cwd=SCRIPT_DIR, timeout=timeout * 60)

    if ret_test.returncode != 0:
        raise Exception("Test '{}' binary returned non-zero ({})!".format(test, ret_test.returncode))

    runtime = time.time() - start
    print("    Done after {:.3f} seconds".format(runtime))

    return runtime


def write_stats(runtimes):
    # measurements
    measurements = ""
    for key, value in runtimes.items():
        measurements += "{}.runtime {}\n".format(key, value)
    with open(STATS_FILE) as f:
        stats = f.read().split("\n")
    measurements += "long_running.queries.executed {}\n".format(stats[0])
    measurements += "long_running.queries.failed {}\n".format(stats[1])
    with open(MEASUREMENTS_FILE, "w") as f:
        f.write(measurements)


if __name__ == "__main__":
    args = parse_arguments()

    if args.use_ssl:
        generate_temporary_ssl_certs()

    proc_mg = start_memgraph(args)

    # at exit cleanup
    # TODO: Kill and start after each test because of storage modes and serialization modes
    @atexit.register
    def cleanup():
        global proc_mg
        if proc_mg.poll() != None:
            return
        proc_mg.kill()
        proc_mg.wait()

    runtimes = run_tests(args)
    stop_memgraph(proc_mg)

    if args.use_ssl:
        remove_certificates(args)

    write_stats(runtimes)

    print("Done!")
